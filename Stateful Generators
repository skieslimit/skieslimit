#stateful generators entire function
#pipeline uses dictinct function and take functions to count the iterables ~ lazy

def take(count, iterable):

    counter = 0 
    for item in iterable:
        if counter == count:
            return
        counter+= 1
        yield item

def run_take():
    items = [2,4,5,8,10]
    for item in take(3,items):
        print(item)

#second half of stateful generators,  
#change name function 
#if number is in seen go to the next iteration(continue), 
#if not then yield item and then add it to seen

def distinct(iterable):
    seen = set()
    for item in iterable:
        if item in seen:
            continue
        yield item
        seen.add(item)

def run_distinct():
    items = [5,7,7,6,5,5]
    for item in distinct(items):
        print(item)

def run_pipeline():
    items = [3,6,6,2,1,1]
    for item in take(3,distinct(items)):
        print(item)

if __name__ == '__main__':
    #run_take()
    run_pipeline()
